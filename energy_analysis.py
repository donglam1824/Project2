#!/usr/bin/env python3
"""
Script ƒë·ªÉ ph√¢n t√≠ch hi·ªáu su·∫•t nƒÉng l∆∞·ª£ng c·ªßa robot
"""

import re

def analyze_energy_log(filename):
    """Ph√¢n t√≠ch file waypoint c√≥ th√¥ng tin nƒÉng l∆∞·ª£ng"""
    
    with open(filename, 'r') as file:
        lines = file.readlines()
    
    energy_data = []
    charging_events = []
    low_energy_events = []
    
    for i, line in enumerate(lines):
        if line.startswith('('):
            # Parse d√≤ng waypoint: (row, col) [Energy: level] [LOW]
            match = re.search(r'\((\d+), (\d+)\) \[Energy: (\d+)\](.*)$', line.strip())
            if match:
                row, col, energy, extra = match.groups()
                row, col, energy = int(row), int(col), int(energy)
                
                is_low = '[LOW]' in extra
                is_charging = False
                
                # Ki·ªÉm tra c√≥ ph·∫£i s·ª± ki·ªán s·∫°c kh√¥ng (nƒÉng l∆∞·ª£ng tƒÉng ƒë·ªôt ng·ªôt)
                if energy_data and energy > energy_data[-1]['energy'] + 10:
                    is_charging = True
                    charging_events.append({
                        'line': i+1,
                        'position': (row, col),
                        'energy_before': energy_data[-1]['energy'] if energy_data else 0,
                        'energy_after': energy
                    })
                
                if is_low:
                    low_energy_events.append({
                        'line': i+1,
                        'position': (row, col),
                        'energy': energy
                    })
                
                energy_data.append({
                    'line': i+1,
                    'position': (row, col),
                    'energy': energy,
                    'is_low': is_low,
                    'is_charging': is_charging
                })
    
    return energy_data, charging_events, low_energy_events

def generate_report(energy_data, charging_events, low_energy_events):
    """T·∫°o b√°o c√°o ph√¢n t√≠ch nƒÉng l∆∞·ª£ng"""
    
    print("=" * 60)
    print("üìä B√ÅO C√ÅO PH√ÇN T√çCH NƒÇNG L∆Ø·ª¢NG ROBOT")
    print("=" * 60)
    
    print(f"\nüìç T·ªîNG QUAN:")
    print(f"  ‚Ä¢ T·ªïng s·ªë waypoints: {len(energy_data)}")
    print(f"  ‚Ä¢ NƒÉng l∆∞·ª£ng b·∫Øt ƒë·∫ßu: {energy_data[0]['energy'] if energy_data else 0}")
    print(f"  ‚Ä¢ NƒÉng l∆∞·ª£ng k·∫øt th√∫c: {energy_data[-1]['energy'] if energy_data else 0}")
    print(f"  ‚Ä¢ T·ªïng nƒÉng l∆∞·ª£ng ti√™u th·ª•: {energy_data[0]['energy'] - energy_data[-1]['energy'] if energy_data else 0}")
    
    print(f"\n‚ö° S·ª∞ KI·ªÜN NƒÇNG L∆Ø·ª¢NG TH·∫§P:")
    print(f"  ‚Ä¢ S·ªë l·∫ßn c·∫£nh b√°o nƒÉng l∆∞·ª£ng th·∫•p: {len(low_energy_events)}")
    for i, event in enumerate(low_energy_events):
        print(f"    {i+1}. V·ªã tr√≠ {event['position']} - NƒÉng l∆∞·ª£ng: {event['energy']} (d√≤ng {event['line']})")
    
    print(f"\nüîã S·ª∞ KI·ªÜN S·∫†C PIN:")
    print(f"  ‚Ä¢ S·ªë l·∫ßn s·∫°c pin: {len(charging_events)}")
    for i, event in enumerate(charging_events):
        energy_gained = event['energy_after'] - event['energy_before']
        print(f"    {i+1}. T·∫°i {event['position']}: {event['energy_before']} ‚Üí {event['energy_after']} (+{energy_gained}) (d√≤ng {event['line']})")
    
    # Ph√¢n t√≠ch hi·ªáu su·∫•t
    if energy_data:
        min_energy = min(point['energy'] for point in energy_data)
        max_energy = max(point['energy'] for point in energy_data)
        avg_energy = sum(point['energy'] for point in energy_data) / len(energy_data)
        
        print(f"\nüìà PH√ÇN T√çCH HI·ªÜU SU·∫§T:")
        print(f"  ‚Ä¢ NƒÉng l∆∞·ª£ng th·∫•p nh·∫•t: {min_energy}")
        print(f"  ‚Ä¢ NƒÉng l∆∞·ª£ng cao nh·∫•t: {max_energy}")
        print(f"  ‚Ä¢ NƒÉng l∆∞·ª£ng trung b√¨nh: {avg_energy:.1f}")
        print(f"  ‚Ä¢ Hi·ªáu qu·∫£ nƒÉng l∆∞·ª£ng: {(avg_energy/max_energy)*100:.1f}%")
    
    # T√¨m kho·∫£ng c√°ch gi·ªØa c√°c l·∫ßn s·∫°c
    if len(charging_events) > 1:
        print(f"\nüö∂ KHO·∫¢NG C√ÅCH GI·ªÆA C√ÅC L·∫¶N S·∫†C:")
        for i in range(1, len(charging_events)):
            distance = charging_events[i]['line'] - charging_events[i-1]['line']
            print(f"  ‚Ä¢ L·∫ßn s·∫°c {i}: {distance} waypoints")
    
    print("\n" + "=" * 60)

def main():
    filename = 'waypoint_gpt_energy.txt'
    
    try:
        energy_data, charging_events, low_energy_events = analyze_energy_log(filename)
        generate_report(energy_data, charging_events, low_energy_events)
        
        # Ghi chi ti·∫øt v√†o file
        with open('energy_detailed_report.txt', 'w') as f:
            f.write("DETAILED ENERGY ANALYSIS REPORT\n")
            f.write("=" * 50 + "\n\n")
            
            f.write("CHARGING EVENTS:\n")
            for event in charging_events:
                f.write(f"Line {event['line']}: Position {event['position']} - "
                       f"Energy {event['energy_before']} ‚Üí {event['energy_after']}\n")
            
            f.write("\nLOW ENERGY EVENTS:\n")
            for event in low_energy_events:
                f.write(f"Line {event['line']}: Position {event['position']} - "
                       f"Energy {event['energy']}\n")
        
        print(f"\nüìÑ Chi ti·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o 'energy_detailed_report.txt'")
        
    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {filename}")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()
